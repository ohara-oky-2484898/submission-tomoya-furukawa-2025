デザインパターン
Design = 設計
Pattern = お手本
設計のお手本

オブジェクト指向の言語の話{C++, Java, C#}

オブジェクト指向のメリット
{
	クラスを定義することで
	・生産性が高い(速く作れる)
	・信頼性が高い(正しく動く)
	プログラムを作ることができる
	ただし、
	{
		再利用性の高いクラスである必要がある
		例えば「自動車」クラスを定義したとする
		{
			次に「自転車」を作りたい
			車クラスはそのまま使えなかったので、新しく作る
			しかし、作り終えてみたら共通機能がたくさんあった
			共通機能をまとめて親クラス「乗り物」を作成
			今度は乗り物クラスを継承して「船」クラスを作成
			{
				継承を使うことで最小限の実装のみで新しいクラスが作れる
				これも再利用性の高さの一つ
				再利用性の高い親クラスを定義したことで生産性が上がった
			}
		}
		再利用性の高いクラスは何度も利用されて
		{
			正しく動くことが保証されていく
			信頼性が上がる
		}
		「再利用性」の高いクラスを設計することでオブジェクト指向のメリットが得られる
		
		反対に
		{
			再利用性の低いクラスを設計してしまうと
			同じようなクラスを何度もつくることになる
				→生産性が低い
			バグが発生したので修正したら
				→同じような処理を他の場所でも書いていたので
				→いろんな箇所でバグが発生
				→信頼性が低い
		}
	}
}

ではどのように設計すればよいのか？
	→明確な正解はない
	ただお手本はある
		→デザインパターン
	広く知られたきっかけは
	オブジェクト指向における再利用のためのデザインパターン
	1995年に出版
	執筆者四人を指して「Gang of Four」（通称：GoF本）
	
	この本では「よく出会う問題とそれに対するいい設計」を23パターン紹介している


ゲームに落とし込むのは大変
	そこで参考になるのが「 Game Programming Patterns 」
	まさにデザインパターンを「ゲーム開発でどう使うか？」を解説してくれている
	C++の本だけどね


注意点
{
	デザインパターンはあくまで設計のお手本を示すものなので
	実際どんな設計にするかは作る人の自由
	これが「アルゴリズム」とは違うところ
	{
		アルゴリズムは処理の順番も明確に決まっているので
		誰が作っても似たようなプログラムになる
	}

	シングルトンも
		自分が認識しているものと違ってもそれはそれでいい
		要点だけ抑えていれば
		あとは自分が使いやすいように
}