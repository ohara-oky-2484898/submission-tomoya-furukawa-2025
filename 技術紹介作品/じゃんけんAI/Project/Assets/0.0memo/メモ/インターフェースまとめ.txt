まとめ

クラス(or構造体)にメソッド・プロパティの実装を強制させることで
インタフェース経由したアクセスができるようになる
インタフェース持つ機能はこれだけだが
{
	これによって
	・より柔軟な設計が可能に
	・カプセル化の強化ができる(限界あり)
	・インタフェース実装することで利用可能なるC#の機能がある(foreachなど)
	いろいろメリットあり
}

設計の基本的な考え方
{
	・has-a 関係
	{
		・"A"は"B"を持っている
		実装方法：
			コンポジション
	}

	・is-a  関係
	{
		・"A"は"B"である
		実装方法：
			クラス継承
			インタフェース
			型オブジェクト
	}
	・can-do関係
	{
		・"A"は"B"ができる
		実装方法：
			できること単位でインタフェース切る
	}
	・共通処理
	{
		実装方法：
			ユーティリティ(utility)クラスにまとめる
			よって、継承しなくても使える
	}
}

クラスの継承を避けるべきなのか
{
	継承を使うことで開発がスムーズになるなら使うべき

	継承が便利になる場合
		シングルトンクラスのように
		継承することでシングルトンであることが保証される
		このクラスを継承しておけば〇〇の機能を持つことが保証される
		ジェネリックになっていて自由度が高い

	シングルトンよりもサービスロケータ？
		インタフェースを使えるようになるため
}