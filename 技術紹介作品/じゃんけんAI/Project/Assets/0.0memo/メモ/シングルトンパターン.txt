シングルトン

特徴
①クラスのインスタンスを一つに制限
②グローバルなアクセスポイントを提供する

////////////////////////////////////////////////////////////////////////////////
シングルトンの問題点
////////////////////////////////////////////////////////////////////////////////
{
	インスタンスが一つしか作れない
	{
		インスタンスが1つじゃないと困るものもある
		・ファイル操作
		・ネットワーク通信
		これらはインスタンスが複数あるとバグの元に

		でも実際のところ
		・ほしい機能は「グローバルにアクセスできる」の方
		・複数のインスタンスを用意しておいて
		{
			グローバルにアクセスできるインスタンスを用途によって切り替えられる
			こっちのほうが便利だったりする
			これがサービスロケータ
		}
	}

	シングルトンはグローバル変数と同じ
	{
		・グローバル変数は避けたほうがいいといわれることが多い
		・クラス間の結合が最も強くなる
			→どこからでもアクセスできるから
		・"ScoreUI"クラスが"GamaManager"クラスに依存する
			→"GamaManager"が存在しない状態では"ScoreUI"は動作しない(nullエラー)
		・"ScoreUI"クラスを理解するのに"GameMnager"クラスを見に行く必要がある
		{
			バグが起きたときに
			"ScoreUI"		が原因か？
			"GameManager"	が原因か？
			わかりにくくなる
		}
		
		とはいえ
		{
			グローバルアクセスを使わない設計というのは難易度が高い
			実際にはグローバルなアクセスポイントがあること自体は仕方ない
			ただ、そのためにシングルトンを乱用するのはやめましょう
			グローバルアクセスを減らすためのデザインパターンもある
		}

	}

	ジェネリックのシングルトンの問題
		→Awake()が乗っ取られる
		{
			virtualなInit()を用意したものの
			これを使うのを忘れてAwake()を継承先で使ってしまうと
			親クラスのジェネリックのシングルトンのAwake()が呼ばれずシングルトンが成立しなくなる
			OnDestroy()も同様
		}
}

////////////////////////////////////////////////////////////////////////////////
staticクラスを使う
////////////////////////////////////////////////////////////////////////////////
{
	・MonoBehaviourを継承する必要がないならstaticクラスでもシングルトンとあまり変わらない
	{
		public static class GameParameters
		{
			public static int Score { get; private set; }

			public static void AddScore(int value)
			{
				Score += value;
			}

			public static void ResetScore()
			{
				Score = 0;
			}
		}
	}
	・例↑↑↑
	　GameMnagerのScoreだけstaticクラスに分離
	・あまりいい例ではないが
		少なくともScoreUIクラスとGameManagerクラスの結合は回避できた
		{
			GameMnagerが存在しなくてもScoreにアクセス化
			nullになることはない
		}


	・--- デメリット ---
	{
		・シングルトンのようにインスタンスを作る場合であれば
		{
			インスタンスを作り直せば変数の値が初期化されるが

			staticの場合は手動で初期化しないといけない
			{
				タイトルに戻ってもう一度ゲームを始めたらスコア表示が前回の値になってる！
				よくあるバグ

				public static Texture DummyTexture;
				↑このようにテクスチャなどのリソースへの参照を持つ場合
					→null を明示的に入れないと解放されない
			}
		}

		・例のようにScoreへのアクセスを後悔する場合
		{
			スコアの操作(Add/Reset)までグローバルに後悔されてしまう
			これを回避したい場合はGamaManagerにstatic変数でScoreを持ってもOK
				→グローバルアクセスしたいものだけstaticで持つ
		}

		・デメリットはいくつかあるもののシングルトン用の実装が不要なので手軽
	}
		
}

////////////////////////////////////////////////////////////////////////////////
サービスロケータ
////////////////////////////////////////////////////////////////////////////////
{
	・やっぱり"MonoBehaviour"を継承したいときもある
	{
		・コンポーネント化することで
		・GameObjectと紐づけられる
		・インスペクターからパラメータを設定できる
		・Start()やUpdate()が使える
		などメリットも多い
	}
	
	・そんなときにシングルトンよりもいい選択肢になりえるのが
		→サービスロケータ
		{
			・サービス(機能を提供するクラス)のありかを示してくれるもの
			・皆さんも多用しているはず
			{
				→GetComponent<>();
				・Unityのコンポーネントは
				{
					・コンポーネントパターン + サービスロケータ
						　= GetComponent
					・コンポーネントのありかを示してくれる
				}
				・これはGameObject単位
				{
					・グローバルな単位でありかを示してくれるものを作る
					・最初に出てきたFindObjectOfType()と非常に似ている
						→これは重いので重くないように作っていきます
				}
			}
		}

	・実装例

	・サービスのありかを示すというシンプルな考え方なので
	・デメリット
	・サービスロケータは
}

